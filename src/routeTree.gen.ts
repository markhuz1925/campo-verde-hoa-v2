/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AppRouteImport } from './routes/_app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthSignUpRouteImport } from './routes/_auth/sign-up'
import { Route as AuthSignInRouteImport } from './routes/_auth/sign-in'
import { Route as AppVehicleStickerSettingsRouteImport } from './routes/_app/vehicle-sticker-settings'
import { Route as AppResidentsIndexRouteImport } from './routes/_app/residents/index'
import { Route as AppResidentsResidentIdRouteImport } from './routes/_app/residents/$residentId'

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)
const AppVehicleStickerSettingsRoute =
  AppVehicleStickerSettingsRouteImport.update({
    id: '/vehicle-sticker-settings',
    path: '/vehicle-sticker-settings',
    getParentRoute: () => AppRoute,
  } as any)
const AppResidentsIndexRoute = AppResidentsIndexRouteImport.update({
  id: '/residents/',
  path: '/residents/',
  getParentRoute: () => AppRoute,
} as any)
const AppResidentsResidentIdRoute = AppResidentsResidentIdRouteImport.update({
  id: '/residents/$residentId',
  path: '/residents/$residentId',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/vehicle-sticker-settings': typeof AppVehicleStickerSettingsRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/residents/$residentId': typeof AppResidentsResidentIdRoute
  '/residents': typeof AppResidentsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/vehicle-sticker-settings': typeof AppVehicleStickerSettingsRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/residents/$residentId': typeof AppResidentsResidentIdRoute
  '/residents': typeof AppResidentsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_app/vehicle-sticker-settings': typeof AppVehicleStickerSettingsRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/_app/residents/$residentId': typeof AppResidentsResidentIdRoute
  '/_app/residents/': typeof AppResidentsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/vehicle-sticker-settings'
    | '/sign-in'
    | '/sign-up'
    | '/residents/$residentId'
    | '/residents'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/vehicle-sticker-settings'
    | '/sign-in'
    | '/sign-up'
    | '/residents/$residentId'
    | '/residents'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_auth'
    | '/_app/vehicle-sticker-settings'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/_app/residents/$residentId'
    | '/_app/residents/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_app/vehicle-sticker-settings': {
      id: '/_app/vehicle-sticker-settings'
      path: '/vehicle-sticker-settings'
      fullPath: '/vehicle-sticker-settings'
      preLoaderRoute: typeof AppVehicleStickerSettingsRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/residents/': {
      id: '/_app/residents/'
      path: '/residents'
      fullPath: '/residents'
      preLoaderRoute: typeof AppResidentsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/residents/$residentId': {
      id: '/_app/residents/$residentId'
      path: '/residents/$residentId'
      fullPath: '/residents/$residentId'
      preLoaderRoute: typeof AppResidentsResidentIdRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppVehicleStickerSettingsRoute: typeof AppVehicleStickerSettingsRoute
  AppResidentsResidentIdRoute: typeof AppResidentsResidentIdRoute
  AppResidentsIndexRoute: typeof AppResidentsIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppVehicleStickerSettingsRoute: AppVehicleStickerSettingsRoute,
  AppResidentsResidentIdRoute: AppResidentsResidentIdRoute,
  AppResidentsIndexRoute: AppResidentsIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
